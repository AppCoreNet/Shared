// <auto-generated />
// Licensed under the MIT license.
// Copyright (c) The AppCore .NET project.

using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reflection;
using System.Text;
using AppCoreNet.Diagnostics;

#nullable enable

namespace AppCoreNet;

/// <summary>
/// Provides extension methods for the <see cref="Type"/> class.
/// </summary>
#if !APPCORENET_SHARED_SOURCES_TESTS
[ExcludeFromCodeCoverage]
#endif
internal static class TypeExtensions
{
    public static string GetDisplayName(this Type type)
    {
        Ensure.Arg.NotNull(type);

        var typeNameBuilder = new StringBuilder();
        BuildDisplayName(typeNameBuilder, type);
        return typeNameBuilder.ToString();
    }

    private static void BuildDisplayName(StringBuilder builder, Type type)
    {
        void BuildTypeArguments(StringBuilder sb, Type[] typeArguments)
        {
            if (typeArguments.Length > 0)
            {
                builder.Append("<");
                for (int i = 0; i < typeArguments.Length; i++)
                {
                    Type typeArgument = typeArguments[i];
                    BuildDisplayName(sb, typeArgument);
                    if (i + 1 < typeArguments.Length)
                        sb.Append(',');
                }

                builder.Append(">");
            }
        }

        void BuildTypeName(StringBuilder sb, Type displayedType)
        {
            if (displayedType.IsGenericType && displayedType.Name.Contains("`"))
            {
                string typeName = displayedType.Name.Substring(0, displayedType.Name.Length - 2);
                sb.Append(typeName);
                BuildTypeArguments(builder, displayedType.GetGenericArguments());
            }
            else
            {
                sb.Append(displayedType.Name);
            }
        }

        if (!type.IsGenericParameter)
        {
            builder.Append(type.Namespace);
            builder.Append(".");
        }

        if (type.IsNested && !type.IsGenericParameter)
        {
            BuildTypeName(builder, type.DeclaringType!);
            builder.Append(".");
        }

        BuildTypeName(builder, type);
    }

    /// <summary>
    /// Gets all types assignable from the specified <paramref name="type"/>.
    /// </summary>
    /// <param name="type"></param>
    /// <param name="includeGenericTypeDefinitions"></param>
    /// <returns>An <see cref="IEnumerable{T}"/> of types assignable from the specified type.</returns>
    public static IEnumerable<Type> GetTypesAssignableFrom(
        [DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.Interfaces)] this Type type,
        bool includeGenericTypeDefinitions = false)
    {
        Ensure.Arg.NotNull(type);

        var assignableTypes = new HashSet<Type>();

        foreach (Type ifce in type.GetInterfaces())
        {
            if (!assignableTypes.Contains(ifce))
            {
                assignableTypes.Add(ifce);

                if (includeGenericTypeDefinitions && ifce.IsGenericType && !ifce.IsGenericTypeDefinition)
                {
                    assignableTypes.Add(ifce.GetGenericTypeDefinition());
                }
            }
        }

        GetBagOfTypesAssignableFrom(type, assignableTypes, includeGenericTypeDefinitions);
        return assignableTypes;
    }

    private static void GetBagOfTypesAssignableFrom(
        Type type,
        HashSet<Type> assignableType,
        bool includeGenericTypeDefinitions = false)
    {
        if (assignableType.Contains(type))
            return;

        assignableType.Add(type);

        if (type == typeof(object))
            return;

        if (type.BaseType != null)
        {
            GetBagOfTypesAssignableFrom(type.BaseType, assignableType, includeGenericTypeDefinitions);
        }

        if (includeGenericTypeDefinitions && type.IsGenericType && !type.IsGenericTypeDefinition)
        {
            GetBagOfTypesAssignableFrom(type.GetGenericTypeDefinition(), assignableType, true);
        }
    }

    /// <summary>
    /// Gets the closed generic type of <paramref name="openGeneric"/> implemented by <paramref name="type"/>.
    /// </summary>
    /// <param name="type">The type to inspect.</param>
    /// <param name="openGeneric">The open generic type which must be implemented.</param>
    /// <returns>The closed generic type.</returns>
    /// <exception cref="InvalidCastException">The specified type does not implement the generic type.</exception>
    public static Type GetClosedTypeOf(
        [DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.Interfaces)] this Type type,
        Type openGeneric)
    {
        Type? result = type.FindClosedTypeOf(openGeneric);
        if (result == null)
        {
            throw new InvalidCastException(
                $"{type.GetDisplayName()} does not implement {openGeneric.GetDisplayName()}");
        }

        return result;
    }

    /// <summary>
    /// Finds the closed generic type of <paramref name="openGeneric"/> implemented by <paramref name="type"/>.
    /// </summary>
    /// <param name="type">The type to inspect.</param>
    /// <param name="openGeneric">The open generic type which should be implemented.</param>
    /// <returns>The closed generic type or <c>null</c> if the type does not implement the generic type..</returns>
    public static Type? FindClosedTypeOf(
        [DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.Interfaces)] this Type type,
        Type openGeneric)
    {
        Ensure.Arg.NotNull(type);
        Ensure.Arg.NotNull(openGeneric);

        if (type.ContainsGenericParameters)
            return null;

        return type.GetTypesAssignableFrom()
                   .FirstOrDefault(t => t.IsGenericType
                                        && t.GetGenericTypeDefinition() == openGeneric);
    }

    /// <summary>
    /// Gets a value indicating whether the closed generic type of <paramref name="openGeneric"/> is implemented.
    /// </summary>
    /// <param name="type">The type to inspect.</param>
    /// <param name="openGeneric">The open generic type which should be implemented.</param>
    /// <returns><c>true</c> if the open generic type is implemented; <c>false</c> otherwise.</returns>
    public static bool IsClosedTypeOf(
        [DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.Interfaces)] this Type type,
        Type openGeneric)
    {
        return type.FindClosedTypeOf(openGeneric) != null;
    }
}